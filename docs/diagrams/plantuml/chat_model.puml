@startuml ChatModel
!theme blueprint

' docs/diagrams/plantuml/chat_model.puml

class ConfigurationManager extends Singleton {
    - Path file_path
    - JSONTemplate json_template
    - MappingTemplate map_template
    + ConfigurationManager(file_path: str, initial_data: Optional[dict[str, Any]])
    + bool load()
    + bool save()
    + bool backup()
    + Any get_value(key: str, default: Optional[Any])
    + bool set_value(key: str, value: Any)
    + str get_env_variable(env_var: str)
}

class ChatCompletionMessage {
    + role: Literal["assistant", "user", "system"]
    + content: str
    + user: NotRequired[str]
}

class ChatModelChatCompletion extends ChatCompletionMessage {
    + role: Literal["assistant", "user", "system", "function"]
    + content: NotRequired[str]
    + function_call: NotRequired[str]
    + function_args: NotRequired[str]
    + user: NotRequired[str]
}

abstract class ChatModel {
    - ConfigurationManager _config
    + ChatModel(config: ConfigurationManager)
    + get_completion(prompt: str): str ' ChatModelCompletion
    + get_chat_completion(messages: List[ChatModelChatCompletion]): ChatModelChatCompletion
    + get_embedding(input: Union[str, List[str]]): List[List[float]] ' ChatModelEmbedding
    + get_encoding(text: str): List[int] ' ChatModelEncoding
}

class ChatModelFactory{
    - ConfigurationManager _config
    - Dict[Literal, Callable] _provider_map
    + ChatModelFactory(config: ConfigurationManager):
    + create_model(provider: str) ChatModel
}

ChatModel::config o--> MappingTemplate : <<ConfigurationManager>>
ChatModel --> ChatModelChatCompletion : uses

@enduml