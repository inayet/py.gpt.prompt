@startuml VectorStoreManager
!theme blueprint

class JSONTemplate {
    ' ... attributes and methods ...
}

class MappingTemplate extends JSONTemplate {
    ' ... attributes and methods ...
}

class ListTemplate extends JSONTemplate {
    // Template class for managing sequences of chat completions
    // JSONMap = Dict[str, Any]
    // JSONList = List[JSONMap]
    + ListTemplate(file_path: str, initial_data: Optional[JSONList])
    # int length
    + None append(item: JSONMap)
    + bool insert(index: int, item: JSONMap)
    + Optional[JSONMap] get(index: int)
    + bool update(index: int, item: JSONMap)
    + bool remove(index: int)
    + Optional[JSONMap] pop(index: int)
    + None clear()
}

class ConfigurationManager extends Singleton {
    - MappingTemplate _map_template
    + ConfigurationManager(file_path: str, initial_data: Optional[JSONMap])
    ' ... other methods ...
}

class ChatCompletionMessage extends TypeDict {
    + role: Literal["assistant", "user", "system", "function"]
    + content: NotRequired[str]
    + function_call: NotRequired[str]
    + function_args: NotRequired[str]
    + user: NotRequired[str]
}

class ContextWindowManager {
    // Contains the current contextual sequence of chat completions
    - int _max_length
    - ListTemplate _list_template
    + ContextWindowManager(file_path: str, initial_data: Optional[JSONList])
    # int max_length
    # int length
    # List[ChatCompletionMessage] sequence
    + None append(message: ChatCompletionMessage)
    + Optional[ChatCompletionMessage] pop_initial_message()
    + bool insert(index: int, message: ChatCompletionMessage)
    + bool remove(index: int)
    + None clear()
}

class ChatSessionTokenManager {
    // Possible alternate identifier is ContextWindowTokenManager
    - str provider
    - ConfigurationManager config
    - ChatModel model
    + float reserve
    + int offset
    + int max_length
    + int max_tokens
    + int upper_bound
    + int reserved_upper_bound
    + int get_sequence_length(text: str)
    + int get_message_length(message: ChatModelChatCompletion)
    + int get_total_message_length(messages: List[ChatModelChatCompletion])
    + bool is_overflow(new_message: ChatModelChatCompletion, messages: List[ChatModelChatCompletion])
}

class TranscriptManager {
    // Contains complete and full records of every chat completion
    - ListTemplate _list_template
    + TranscriptManager(file_path: str, initial_data: Optional[JSONList])
    + None append(message: ChatCompletionMessage)
    + List[ChatCompletionMessage] sequence
}

abstract EmbeddingFunction extends Protocol {
    - ChatModelEmbedding __call__(texts: ChatModelDocuments)
}

class ChatModelEmbeddingFunction extends EmbeddingFunction {
    + ChatModelEmbeddingFunction(model: ChatModel)
}

' Added classes related to ChromaDB interaction
class PersistentClient {
    + create_collection(name: str, embedding_function: EmbeddingFunction)
    + get_collection(name: str, embedding_function: EmbeddingFunction)
}

class Collection {
    + add(documents: Documents, ids: list[str])
    + query(query_texts: list[str], n_results: int)
}

class VectorStoreManager {
    - PersistentClient chroma_client
    - ChatModelEmbeddingFunction embedding_function
    - str collection_name
    - Collection collection
    - ConfigurationManager config
    + __init__(path_database: str, chat_model: ChatModel, config_path: str)
    + store_message(message: str, message_id: str)
    + QueryResult query_messages(query_text: str, n_results: int)
}

' Relationships
ContextWindowManager --> ChatCompletionMessage : <<uses>>
TranscriptManager --> ChatCompletionMessage : <<uses>>
ChatSessionTokenManager --> ChatCompletionMessage : <<uses>>
ContextWindowManager --> ChatSessionTokenManager : <<uses>>

ContextWindowManager::_list_template o--> ListTemplate : <<component>>
TranscriptManager::_list_template o--> ListTemplate : <<component>>

VectorStoreManager --> ConfigurationManager : <<uses>> ' Configuration management
VectorStoreManager --> PersistentClient : <<uses>> ' Uses to create and get collections
VectorStoreManager --> ChatModelEmbeddingFunction : <<uses>> ' Embedding function
VectorStoreManager --> Collection : <<uses>> ' Interacts with a specific collection

ConfigurationManager --> MappingTemplate : <<component>>

ContextWindowManager -> TranscriptManager : Sends messages
ContextWindowManager -> VectorStoreManager : Sends dequeued messages
TranscriptManager -> VectorStoreManager : Optional: Interacts with dequeued messages

ChatModelEmbeddingFunction ..> EmbeddingFunction : <<extends>>
VectorStoreManager --> ChatModelEmbeddingFunction : <<uses>> ' Uses to create embeddings
VectorStoreManager --> PersistentClient : <<uses>> ' Uses to interact with ChromaDB
VectorStoreManager --> Collection : <<uses>> ' Adds and queries embeddings to/from collection

MappingTemplate o--> ConfigurationManager::map_template
@enduml