"""
pygptprompt/pattern/embedding.py
"""
from pygptprompt.pattern.model import ChatModel
from pygptprompt.pattern.types import (
    ChatModelDocuments,
    ChatModelEmbedding,
    EmbeddingFunction,
)


class ChatModelEmbeddingFunction(EmbeddingFunction):
    def __init__(self, model: ChatModel):
        """
        Initialize the ChatModelEmbeddingFunction.

        Args:
            model (ChatModel): The chat model instance, e.g. OpenAIModel or LlamaCppModel API.
        """
        self._model = model

    def __call__(self, texts: ChatModelDocuments) -> ChatModelEmbedding:
        """
        Generate embeddings using the chat model.

        Args:
            texts (ChatModelDocuments): The input texts for which embeddings need to be generated.

        Returns:
            ChatModelEmbedding: The list of embeddings generated by the chat model.
        """
        # Replace newlines, which can negatively affect performance.
        texts = [t.replace("\n", " ") for t in texts]

        # Get embeddings from the chat model API
        return self._model.get_embedding(input=texts)

        # Sort resulting embeddings by index
        # Note: This sorting step may not be necessary depending on the API response.
        # The `Embeddings` type should be a list of `EmbeddingData` objects.
        # sorted_embeddings: ChatModelEmbedding = sorted(embeddings, key=lambda e: e["index"])  # type: ignore

        # # Return just the embeddings
        # return [result["embedding"] for result in sorted_embeddings]
